# -*- coding: utf-8 -*-
"""Bank Customer churn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qiv1EC50SRuI5lWCLm6_UA1D05tKxM3i

Installing Tensorflow-gpu
"""

!pip install tensorflow-gpu

"""Check the tensorflow version"""

import tensorflow as tf
print(tf.__version__)

"""Import some libraries

"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""Import dataset"""

df=pd.read_csv('/content/Churn_Modelling.csv')
df.head()

"""Divide the df into dependent and independent"""

X = df.iloc[:,3:13]
Y = df.iloc[:,13]

X.head()

Y

"""Feature Engineering

"""

geography=pd.get_dummies(X['Geography'], drop_first=True)
gender=pd.get_dummies(X['Gender'], drop_first=True)

"""Concat the colums"""

X=X.drop(['Geography','Gender'], axis=1)

X.head()

X=pd.concat([X,geography,gender],axis=1)

X.head()

"""spliting the df into training and testing set"""

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test=train_test_split(X,Y, test_size=0.2, random_state=2)

"""Feature scaling"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

X_train

X_test

X_train.shape

"""Create ANN """

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LeakyReLU,PReLU,ELU,ReLU
from tensorflow.keras.layers import Dropout

"""Initialize the ANN"""

Classifier=Sequential()

"""Add the input layer"""

Classifier.add(Dense(units=11,activation='relu'))

"""Adding hidden layers 1 and 2"""

Classifier.add(Dense(units=7,activation='relu'))
Classifier.add(Dense(units=6,activation='relu'))

"""Adding the output layer"""

Classifier.add(Dense(units=1,activation='sigmoid'))

Classifier.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])

## Early stopping
import tensorflow as tf
early_stopping=tf.keras.callbacks.EarlyStopping(
    monitor="val_loss",
    min_delta=0.0001,
    patience=20,
    verbose=1,
    mode="auto",
    baseline=None,
    restore_best_weights=False,
)

model=Classifier.fit(X_train,Y_train,validation_split=0.33,batch_size=10,epochs=100,callbacks=early_stopping)

model.history.keys()

"""Prediction part"""

Y_pred = Classifier.predict(X_test)
Y_pred = (Y_pred >= 0.5)

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(Y_test,Y_pred)
cm

from sklearn.metrics import accuracy_score
score=accuracy_score(Y_pred,Y_test)
score